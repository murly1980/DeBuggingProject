/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project.quiz;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anuja
 */
public class SearchTableIF extends javax.swing.JInternalFrame {

    /**
     * Creates new form SearchTableIF
     */
  
   UpdateInternalFrame update=new UpdateInternalFrame();
    Connection con=null;
    Statement stmt=null;
    ResultSet resultSet;
    DefaultTableModel defaultTableModel;
    Question question;
     int row;
    public SearchTableIF() {
        initComponents();
        setVisible(true);
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
     
    }

    SearchTableIF(List<Question> questions) {
        this();
         defaultTableModel=(DefaultTableModel)questionTable.getModel();
        for(int z=0;z<questions.size();z++){
             question =(Question)questions.get(z);
              Object rows[]= new Object[]{question.getQuestionId(),
                        question.getQuestion(),
                        question.getOption1(),
                        question.getOption2(),
                        question.getOption3(),
                        question.getOption4(),
                    question.getRightAnswer()};
                    
                    
                    
                    defaultTableModel.insertRow(z,rows);
        }
        
       
                   
                    
    }
      
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        dataTable = new javax.swing.JScrollPane();
        questionTable = new javax.swing.JTable();

        editBtn.setText("EDIT");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        closeBtn.setText("CLOSE");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        questionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Quest.ID", "Questn. Description", "Option 1", "Option 2", "Option 3", "Option 4", "Right Option"
            }
        ));
        dataTable.setViewportView(questionTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataTable, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(closeBtn)
                        .addGap(71, 71, 71)
                        .addComponent(deleteBtn)
                        .addGap(59, 59, 59)
                        .addComponent(editBtn)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeBtn)
                    .addComponent(deleteBtn)
                    .addComponent(editBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dataTable, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    public void result(String iD,String question,String option1,String option2,String option3,String option4,String rightOption){
        defaultTableModel=(DefaultTableModel)questionTable.getModel();
        Question questions=new Question();
                    Object rows[]= new Object[]{questions};
                    System.out.println(iD);
                    System.out.println(question);
                    System.out.println(option1);
                    System.out.println(option2);
                    System.out.println(option3);
                    System.out.println(option4);
                    System.out.println(rightOption);
                    
                    
                    defaultTableModel.insertRow(0,rows);
                    
    }
    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
      int[] indexs=questionTable.getSelectedRows();
      
      if(indexs.length==1){
       
       
      BlankDesktopPane.desktopPane.add(update);
        update.setClosable(true);
         update.setMaximizable(true);
          update.setIconifiable(true);
           update.setResizable(true);
           update.setVisible(true);
            update.show();
           
             getValueOfSelectedRow();
             
            //updateIf.updatedQuestion(null, null,null, null, null, null, null);
       }
        if(questionTable.getSelectionModel().isSelectionEmpty())
      {
          JOptionPane.showMessageDialog(this, "Please select a row");
      }
     
       if(indexs.length>1){
          JOptionPane.showMessageDialog(this, "Please select a single row.");
      }
       
       
           // 
        
    }//GEN-LAST:event_editBtnActionPerformed
       
    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
         int result=  JOptionPane.showConfirmDialog(this, "Are you sure you want to delete it?");
          if(result == JOptionPane.YES_OPTION){
        
     //  int[] rows = SearchTableIF.questionTable.getSelectedRows();
       //String value = questionTable.getModel().getValueAt(0,1).toString();
       //System.out.println(value);
        //**********************************
     
        int[] selectedRow = questionTable.getSelectedRows();
        int[] selectedColumns = questionTable.getSelectedColumns();
        String[] slectedIndexes=new String[selectedRow.length];
        int questionIdIndex=0;
        for (int k = 0; k < selectedRow.length; k++) {
        //  for (int j = 0; j < selectedColumns.length; j++) {
            slectedIndexes[k] =   (String) questionTable.getValueAt(selectedRow[k], selectedColumns[questionIdIndex]);
            
            System.out.println("Selected: " + slectedIndexes[k]);
       
        }
       
        QuestionService.deleteQuestion(slectedIndexes);
       
       //***************************
                for(int i=0;i<selectedRow.length;i++){
                defaultTableModel.removeRow(selectedRow[i]-i);
                }
          }
          else if (result == JOptionPane.NO_OPTION){
               dispose();
            }else {
               dispose();
            }
    }//GEN-LAST:event_deleteBtnActionPerformed
     public static void setValue(Question questions){
          
     }
    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
       this.dispose();
    }//GEN-LAST:event_closeBtnActionPerformed
   
    public void UpdatedTable(Question questions){
        
         System.out.println("XXXXXXXXXX"+row);
     questionTable.setValueAt(questions.getQuestionId(),row, 0);
        questionTable.setValueAt(questions.getQuestion(), row, 1);
          questionTable.setValueAt(questions.getOption1(), row, 2);
          questionTable.setValueAt(questions.getOption2(), row, 3);
         questionTable.setValueAt(questions.getOption3(), row, 4);
       questionTable.setValueAt(questions.getOption4(), row, 5);
          
          switch((String)update.rightOptionComboBox.getModel().getSelectedItem()){
         case "Option1":
          
         questionTable.setValueAt(questions.getOption1(), row, 6);
         
          break;
          
      case "Option2":
          
          questionTable.setValueAt(questions.getOption2(), row, 6);
          break;
          
           case "Option3":
         questionTable.setValueAt(questions.getOption3(), row, 6);
          break;
               
                case "Option4":
          questionTable.setValueAt(questions.getOption4(), row, 6);
          break;
          }
         
         
    }
     public void getValueOfSelectedRow(){
         Question questn=new Question();
                    row = questionTable.getSelectedRow();
               System.out.println("Selected row is"+row);
           questn.setQuestionId((int) questionTable.getModel().getValueAt(row, 0));
           questn.setQuestion(questionTable.getModel().getValueAt(row, 1).toString()); 
           questn.setOption1(questionTable.getModel().getValueAt(row, 2).toString()); 
          questn.setOption2( questionTable.getModel().getValueAt(row, 3).toString()); 
          questn.setOption3(questionTable.getModel().getValueAt(row, 4).toString()); 
           questn.setOption4( questionTable.getModel().getValueAt(row, 5).toString());
           questn.setRightAnswer(questionTable.getModel().getValueAt(row, 6).toString());
           
           update.questionToBeUpdated(questn);
            
            
     }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeBtn;
    private javax.swing.JScrollPane dataTable;
    public javax.swing.JButton deleteBtn;
    public javax.swing.JButton editBtn;
    public javax.swing.JTable questionTable;
    // End of variables declaration//GEN-END:variables
}
